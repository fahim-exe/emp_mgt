#FrontEnd
1. React JS

#BackEnd 
1. Python
2. Django

#DATABASE
1. SQLite

Steps:
1. Build back end
2. Create rest api end points
3. Use react to create front end


Keypoints:
1. routing

**MAJOR STEPS**
	**1. Step-1**
		i. Install required software
			1. Code editor (VS Code, Sublime etc)
			2. Python (for back end) (check python version >> python --version for linux)
			4. Postman (for testing REST Api)
			5. SQLite Studio (for database testing and management)
			6. nodejs ()
		ii. Install Django, Nodejs, npm, 
			Django Command >> pip install django
			Nodejs Command >> (sudo apt install curl >> curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - &&sudo apt-get install -y nodejs >> )
		iii. Install Necessary Modules
			1. REST API >>> pip install djangorestframework
			2. Unblocking domain request >>> pip install django-cors-headers
	2. **STEP-2**
		i. Create EmployeeApp >> python manage.py startapp EmployeeApp
		ii. Register App modules in settings.py (project level) , >> 'rest_framework', 'corsheaders', 'EmployeeApp.apps.EmployeeappConfig'
		iii. Add corsheaders to middleware >>'corsheaders.middleware.CorsMiddleWare'
		iv. Add the line above midlleware list >> CORS_ORIGIN_ALLOW = True
	3. **STEP-3**
		1. Create Models for database 
			i. models >> Departments, Employees
			ii. Add fields to the models.
				Departments >> Department_ID, Department_Name
				Employees >> Employee_ID, Employee_Name, Employee_Dept, Employee_DOJ, Employee_PHOTO
		2. Make migrations for the models
			'python manage.py makemigrations EmployeeApp'
			'python manage.py migrate'
		3. Cross check your database modes in SQLite Studio
		4.  Create Serializers for our models
			What it is: Serializers are **used to convert complex data types, such as Django model instances, into Python data types that can be easily rendered into JSON, XML, or other content types**. Serializers also provide deserialization, allowing parsed data to be converted back into complex types after first validating the incoming data.
			
			
			
			


